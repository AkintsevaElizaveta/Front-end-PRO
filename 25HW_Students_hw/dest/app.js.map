{"version":3,"sources":["Students.js","Collection.js","View.js","Controller.js","index.js"],"names":["Students","ROOT_URI","request","settings","setting","uri","method","data","error","fetch","this","headers","Content-type","body","JSON","stringify","undefined","then","res","ok","json","Error","getList","create","name","marks","update","id","delete","Collection","#list","setList","list","find","c","filter","item","student","push","View","STUDENTS_LIST_SELECTOR","STUDENTS_ITEM_SELECTOR","DELETE_BTN_SELECTOR","MARKS_FIELD_SELECTOR","MARKS_FIELD_CLASS","NEW_STUDENT_CONTAINER_SELECTOR","NEW_STUDENT_FIELD_CLASS","NEW_STUDENT_BTN_SELECTOR","#$list","#$new","#options","constructor","options","$","on","onMarksFieldClick","e","onDeleteBtnClick","onCreateBtnClick","stopPropagation","getStudentId","target","closest","let","i","children","length","className","includes","Number","value","onUpdate","onDelete","container","studentsName","onCreate","renderStudentList","html","map","generateHtmlList","join","appendTo","$el","append","el","dataset","createInputs","result","Controller","#$rootContainer","$container","collection","renderList"],"mappings":"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","file":"app.js","sourcesContent":["class Students{\n\n    static ROOT_URI = 'https://62e3d1843c89b95396d11a75.mockapi.io/students';\n\n    static request(settings) {\n        const setting = {\n            uri: '',\n            method: 'GET',\n            data: null,\n            error: 'API request error.',\n            ...settings,\n        };\n\n        return fetch(`${this.ROOT_URI}/${setting.uri}`, {\n            method: setting.method,\n            headers: {\n                'Content-type': 'application/json; charset=UTF-8',\n            },\n            body: setting.data ? JSON.stringify(setting.data) : undefined,\n        })\n            .then((res) => {\n                if (res.ok) {\n                    return res.json();\n                }\n\n                throw new Error(setting.error);\n            });\n    }\n\n    static getList() {\n            return this.request({ error: \"Can't fetch students\" });\n    }\n\n    static create(name) {\n        let student = {\n            name: name,\n            marks: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n        }\n\n        return this.request({ method: 'POST', data: student, error: \"Can't create student\" });\n    }\n\n    static update(id, marks) {\n        let student = {\n            marks: marks,\n        }\n\n        return this.request({ uri: `/${id}`, method: 'PUT', data: student, error: \"Can't update the student.\"});\n    }\n\n\n    static delete(id) {\n        return this.request({ uri: `/${id}`, method: 'DELETE', error: \"Can't delete the student.\"});\n    }\n\n}","class Collection {\n    #list\n\n    fetch() {\n        return Students.getList().then((list) => {\n            this.setList(list);\n        })\n    }\n\n    setList(list) {\n        this.#list = list;\n    }\n\n    getList() {\n        return this.#list;\n    }\n\n    find(id) {\n        return this.#list.find(c => c.id === id);\n    }\n\n    delete(id) {\n        this.#list = this.#list.filter(item => item.id !== id);\n\n        return Students.delete(id);\n    }\n\n    update(id, marks){\n        return Students.update(id, marks)\n    }\n\n    create(name){\n        return Students.create(name)\n            .then(student => this.#list.push(student));\n    }\n}","class View {\n    static STUDENTS_LIST_SELECTOR = '#studentsList';\n    static STUDENTS_ITEM_SELECTOR = '.students_container__item';\n    static DELETE_BTN_SELECTOR = '.delete_btn';\n    static MARKS_FIELD_SELECTOR = '.students_container__marks';\n    static MARKS_FIELD_CLASS = 'students_container__marks';\n    static NEW_STUDENT_CONTAINER_SELECTOR = \"#newStudentContainer\"\n    static NEW_STUDENT_FIELD_CLASS = 'students_container_new_input';\n    static NEW_STUDENT_BTN_SELECTOR = '#newStudentBtn';\n\n    #$list;\n    #$new;\n    #options;\n\n    constructor(options) {\n        this.#$list = $(View.STUDENTS_LIST_SELECTOR)\n            .on('change', View.MARKS_FIELD_SELECTOR, (e) => this.onMarksFieldClick(e))\n            .on('click', View.DELETE_BTN_SELECTOR, (e) => this.onDeleteBtnClick(e))\n        this.#$new = $(View.NEW_STUDENT_CONTAINER_SELECTOR)\n            .on('click',View.NEW_STUDENT_BTN_SELECTOR,(e) => this.onCreateBtnClick(e))\n\n        this.#options = options;\n    }\n\n    onMarksFieldClick(e){\n        e.stopPropagation();\n\n        const id = this.getStudentId(e.target);\n        const item = e.target.closest(View.STUDENTS_ITEM_SELECTOR);\n        const marks = [];\n\n        for(let i = 0; i < item.children.length; i++) {\n            if (item.children[i].className.includes(View.MARKS_FIELD_CLASS)) {\n                marks.push(Number(item.children[i].value))\n            }\n        }\n\n        this.#options.onUpdate(id, marks);\n    }\n\n    onDeleteBtnClick(e) {\n        e.stopPropagation();\n\n        const id = this.getStudentId(e.target);\n\n        this.#options.onDelete(id);\n    }\n\n    onCreateBtnClick(e){\n        e.stopPropagation();\n\n        const container = e.target.closest('.new_students_container')\n        let children = []\n\n        children.push(...container.children)\n\n        const input = children.find(i => i.className.includes(View.NEW_STUDENT_FIELD_CLASS))\n        const studentsName = input.value;\n\n        this.#options.onCreate(studentsName);\n    }\n\n    renderStudentList(list) {\n        const html = list.map(list => this.generateHtmlList(list)).join('');\n\n        this.#$list.html(html);\n    }\n\n    appendTo($el) {\n        $el.append(this.#$list);\n    }\n\n    getStudentId(el) {\n        return el.closest(View.STUDENTS_ITEM_SELECTOR)?.dataset.id;\n    }\n\n    generateHtmlList(item){\n        return ` \n       <li class=\"students_container__item\" data-id=\"${item.id}\">\n            <strong>${item.name}</strong>\n            ${this.createInputs(item.marks)}\n            <button class=\"delete_btn\">DELETE</button>\n       </li>\n    `;\n    }\n\n    createInputs(marks){\n        let result = '';\n\n        for (let i = 0; i < marks.length; i++){\n            result += `<input type=\"text\" class=\"students_container__marks\" value=\"${marks[i]}\">`\n        }\n\n        return result;\n\n    }\n}","class Controller{\n    #$rootContainer;\n\n    constructor($container) {\n        this.#$rootContainer = $container;\n        this.collection = new Collection();\n        this.View = new View({\n            onDelete: id => this.collection.delete(id).then(() => this.renderList()),\n            onUpdate: (id, marks) => this.collection.update(id, marks)\n                .then(() => this.renderList()),\n            onCreate: name => this.collection.create(name).then(() => this.renderList())\n        })\n\n        this.View.appendTo(this.#$rootContainer);\n        this.collection.fetch()\n            .then(() => this.renderList());\n    }\n\n    renderList() {\n        this.collection.fetch()\n            .then(() => this.View.renderStudentList(this.collection.getList()));\n    }\n\n}","new Controller($('#studentsList'))"]}