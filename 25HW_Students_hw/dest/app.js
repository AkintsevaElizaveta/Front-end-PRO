class Students{static ROOT_URI="https://62e3d1843c89b95396d11a75.mockapi.io/students";static request(t){const e={uri:"",method:"GET",data:null,error:"API request error.",...t};return fetch(this.ROOT_URI+"/"+e.uri,{method:e.method,headers:{"Content-type":"application/json; charset=UTF-8"},body:e.data?JSON.stringify(e.data):void 0}).then(t=>{if(t.ok)return t.json();throw new Error(e.error)})}static getList(){return this.request({error:"Can't fetch students"})}static create(t){return this.request({method:"POST",data:{name:t,marks:[0,0,0,0,0,0,0,0,0,0]},error:"Can't create student"})}static update(t,e){return this.request({uri:"/"+t,method:"PUT",data:{marks:e},error:"Can't update the student."})}static delete(t){return this.request({uri:"/"+t,method:"DELETE",error:"Can't delete the student."})}}class Collection{#list;fetch(){return Students.getList().then(t=>{this.setList(t)})}setList(t){this.#list=t}getList(){return this.#list}find(e){return this.#list.find(t=>t.id===e)}delete(e){return this.#list=this.#list.filter(t=>t.id!==e),Students.delete(e)}update(t,e){return Students.update(t,e)}create(t){return Students.create(t).then(t=>this.#list.push(t))}}class View{static STUDENTS_LIST_SELECTOR="#studentsList";static STUDENTS_ITEM_SELECTOR=".students_container__item";static DELETE_BTN_SELECTOR=".delete_btn";static MARKS_FIELD_SELECTOR=".students_container__marks";static MARKS_FIELD_CLASS="students_container__marks";static NEW_STUDENT_CONTAINER_SELECTOR="#newStudentContainer";static NEW_STUDENT_FIELD_CLASS="students_container_new_input";static NEW_STUDENT_BTN_SELECTOR="#newStudentBtn";#$list;#$new;#options;constructor(t){this.#$list=$(View.STUDENTS_LIST_SELECTOR).on("change",View.MARKS_FIELD_SELECTOR,t=>this.onMarksFieldClick(t)).on("click",View.DELETE_BTN_SELECTOR,t=>this.onDeleteBtnClick(t)),this.#$new=$(View.NEW_STUDENT_CONTAINER_SELECTOR).on("click",View.NEW_STUDENT_BTN_SELECTOR,t=>this.onCreateBtnClick(t)),this.#options=t}onMarksFieldClick(t){t.stopPropagation();var e=this.getStudentId(t.target);const s=t.target.closest(View.STUDENTS_ITEM_SELECTOR),n=[];for(let t=0;t<s.children.length;t++)s.children[t].className.includes(View.MARKS_FIELD_CLASS)&&n.push(Number(s.children[t].value));this.#options.onUpdate(e,n)}onDeleteBtnClick(t){t.stopPropagation();t=this.getStudentId(t.target);this.#options.onDelete(t)}onCreateBtnClick(t){t.stopPropagation();t=t.target.closest(".new_students_container");let e=[];e.push(...t.children);t=e.find(t=>t.className.includes(View.NEW_STUDENT_FIELD_CLASS)).value;this.#options.onCreate(t)}renderStudentList(t){t=t.map(t=>this.generateHtmlList(t)).join("");this.#$list.html(t)}appendTo(t){t.append(this.#$list)}getStudentId(t){return t.closest(View.STUDENTS_ITEM_SELECTOR)?.dataset.id}generateHtmlList(t){return` 
       <li class="students_container__item" data-id="${t.id}">
            <strong>${t.name}</strong>
            ${this.createInputs(t.marks)}
            <button class="delete_btn">DELETE</button>
       </li>
    `}createInputs(e){let s="";for(let t=0;t<e.length;t++)s+=`<input type="text" class="students_container__marks" value="${e[t]}">`;return s}}class Controller{#$rootContainer;constructor(t){this.#$rootContainer=t,this.collection=new Collection,this.View=new View({onDelete:t=>this.collection.delete(t).then(()=>this.renderList()),onUpdate:(t,e)=>this.collection.update(t,e).then(()=>this.renderList()),onCreate:t=>this.collection.create(t).then(()=>this.renderList())}),this.View.appendTo(this.#$rootContainer),this.collection.fetch().then(()=>this.renderList())}renderList(){this.collection.fetch().then(()=>this.View.renderStudentList(this.collection.getList()))}}new Controller($("#studentsList"));
//# sourceMappingURL=app.js.map